/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package queueAndStack;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    //Stack Tests
    @Test void pushOneValueToStack() {
   stack sample=new stack();
   sample.push(1);
   String expected ="Stack={1}";
   String actual=sample.toString();
   assertEquals(expected,actual);
    }
    @Test void pushMulipleValuesToStack(){
        stack sample=new stack();
        sample.push(1);
        sample.push(2);
        sample.push(3);
        String expected ="Stack={3,2,1}";
        String actual=sample.toString();
        assertEquals(expected,actual);
    }
    @Test void popFromStack(){
        stack sample=new stack();
        sample.push(1);
        sample.push(2);
        sample.pop();
        sample.push(3);
        String expected ="Stack={3,1}";
        String actual=sample.toString();
        assertEquals(expected,actual);
    }
    @Test void popAllFromStack(){
        stack sample=new stack();
        sample.push(1);
        sample.push(2);
        sample.push(3);
        sample.pop();
        sample.pop();
        sample.pop();
        String expected ="Stack={";
        String actual=sample.toString();
        assertEquals(expected,actual);
    }
    @Test void peekFromStack(){
        stack sample=new stack();
        sample.push(1);
        sample.push(2);
        sample.push(3);
        int  actual=sample.peek();
        int expected=3;
        assertEquals(expected,actual);
    }
    @Test void instantiateEmptyStack(){
        stack sample=new stack();
        boolean actual=sample.empty();
        boolean expected=true;
        assertEquals(expected,actual);
    }
    @Test void callingPeekWhenEmptyStack(){
        stack sample=new stack();
        int actual= sample.peek();
        // -1 mean Exception has happened
        int expected=-1;
        assertEquals(expected,actual);
    }
    //Stack Tests end here

    //Queues tests
    @Test void enqueueToQueue() {
        queue sample=new queue();
        sample.enqueue(1);
        int expected =1;
        int actual=sample.getFront();
        assertEquals(expected,actual);
    }
    @Test void enqueueMultipleValuesToQueue() {
        queue sample=new queue();
        sample.enqueue(1);
        sample.enqueue(2);
        sample.enqueue(3);

        int expectedFront =1;
        int actualFront=sample.getFront();
        assertEquals(expectedFront,actualFront);

        int expectedRear =3;
        int actualRear=sample.getRear();
        assertEquals(expectedRear,actualRear);
    }
    @Test void dequeueFromQueue() {
        queue sample=new queue();
        sample.enqueue(1);
        sample.enqueue(2);
        sample.enqueue(3);
        sample.dequeue();
        int expected =2;
        int actual=sample.getFront();
        assertEquals(expected,actual);
    }
    @Test void peekFromQueue() {
        queue sample=new queue();
        sample.enqueue(1);
        sample.enqueue(2);
        sample.enqueue(3);
        int expected =1;
        int actual=sample.peek();
        assertEquals(expected,actual);
    }
    @Test void dequeueAllFromQueue() {
        queue sample=new queue();
        sample.enqueue(1);
        sample.enqueue(2);
        sample.enqueue(3);
        sample.dequeue();
        sample.dequeue();
        sample.dequeue();

        boolean expected =true;
        boolean actual=sample.isEmpty();
        assertEquals(expected,actual);
    }
    @Test void instantiateEmptyqueue() {
        queue sample=new queue();
        boolean expected =true;
        boolean actual=sample.isEmpty();
        assertEquals(expected,actual);
    }
    @Test void callingPeekWhenEmptyQueue(){
        queue sample=new queue();
        int actual= sample.peek();
        // -1 mean Exception has happened
        int expected=-1;
        assertEquals(expected,actual);
    }
    //Queues tests end here
}
